name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # Job 1: Build and Push Docker Image to ECR
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: us-east-1
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_URI }}/my-app:latest .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_URI }}/my-app:latest

  # Job 2: Snyk Security Scan
  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: docker build -t my-app .

      - name: Snyk Docker Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          curl -sL https://snyk.io/install | bash
          snyk auth $SNYK_TOKEN
          snyk container test my-app

  # Job 3: Terraform Apply
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin

  # Job 4: Run Automated Tests
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  # Job 5: Linting
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install ESLint
        run: npm install eslint

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx

  # Job 6: Deploy to Kubernetes
  deploy-to-k8s:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml

  # Job 7: Notifications via Slack
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'JULIO' # Substitua pelo ID do seu canal
          text: 'Pipeline executado com sucesso!'

  # Job 8: Backup Database
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Backup Database
        run: |
          mysqldump -u $DB_USER -p$DB_PASSWORD my_database > backup.sql
          aws s3 cp backup.sql s3://my-backup-bucket/backup.sql
